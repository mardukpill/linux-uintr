uintr_register_self(2)        System Calls Manual       uintr_register_self(2)



NAME
       uintr_register_self  - Register a process as a User Interrupt sender to
       itself.


SYNOPSIS
        int uintr_register_self(u64 vector, unsigned int flags);


DESCRIPTION
       uintr_register_self() allows a process to  connect  with  itself  as  a
       Uintr  sender  based  on  the  vector.  It  returns  a  user  IPI index
       (uipi_index) that all threads that are part of the same the process can
       use  in  conjunction  with  the SENDUIPI instruction to generate a user
       IPI.

       uintr_register_self() is useful if the  process  would  like  to  avoid
       using  an  FD  based connection setup for connection between threads of
       the same  process.  The  behavior  when  a  sender  executes  'SENDUIPI
       <uipi_index>' is exactly the same as uintr_register_sender(2).

       The  flags  argument is reserved for future use.  Currently, it must be
       specified as 0.

       For   information   on   how   to    unregister    a    sender    refer
       uintr_unregister_sender(2).


RETURN VALUE
       On  success,  uintr_register_self()  returns  a  new  user  IPI index -
       uipi_index. On error, -1 is returned and errno is set to  indicate  the
       cause of the error.


ERRORS
       ENOSYS      Underlying hardware doesn't have support for uintr(7).

       EINVAL      flags is not 0.

       ECONNRESET  The user interrupt receiver has disabled the connection.

       ESHUTDOWN   The user interrupt receiver has exited the connection.

       ENOSPC        No uipi_index can be allocated. The system has run out of
                   the available user IPI indexes.

       ENOMEM       The  system  is out of available memory to register a user
       IPI
                   sender.

       ENOSPC      The requested vector is out of available range.


VERSIONS
       uintr_register_self() first appeared in Linux <tbd>.


CONFORMING TO
       uintr_register_self() is Linux specific.


NOTES
       Currently, there is no glibc wrapper for  this  system  call;  call  it
       using syscall(2).

       The  user  interrupt  related  system  calls  need  hardware support to
       generate and receive user interrupts. Refer uintr(7) for details.



                                                        uintr_register_self(2)

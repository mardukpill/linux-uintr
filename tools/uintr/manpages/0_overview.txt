UINTR(7)               Miscellaneous Information Manual               UINTR(7)



NAME
       Uintr - overview of User Interrupts

DESCRIPTION
       User Interrupts (Uintr) provides a low latency event delivery and inter
       process communication mechanism. These events can be delivered directly
       to userspace without a transition to the kernel.

       In  the  User  Interrupts  hardware  architecture, a receiver is always
       expected to be a user space task. However, a user interrupt can be sent
       by  another  user  space  task,  kernel  or  an external source (like a
       device). The feature that allows another  userspace  task  to  send  an
       interrupt is referred to as User IPI.

       Uintr  is  a  hardware  dependent,  opt-in  feature. Application aren't
       expected or able to send or receive  interrupts  unless  they  register
       themselves with the kernel using the syscall interface described below.
       It is recommended that applications wanting to use User Interrupts call
       uintr_register_handler(2) and test whether the call succeeds.

       Hardware  support  for  User  interrupts  may  be  detected using other
       mechanisms but that could be misleading and is generally not needed:
        - Using the cpuid instruction (Refer  the  Intel  Software  Developers
       Manual).
        -  Checking  for the "uintr" string in /proc/cpuinfo under the "flags"
       field.


       Applications wanting to use Uintr  should  also  be  able  to  function
       without  it  as well. Uintr support might be unavailable because of any
       one of the following reasons:
        - the kernel code does not contain support
        - the kernel support has been disabled
        - the hardware does not support it


   Uintr syscall interface
       Applications can use and manage Uintr using the system calls  described
       here.   The  Uintr  system  calls  are  available only if the kernel is
       configured with the CONFIG_X86_USER_INTERRUPTS option.

       1)  A  user  application   registers   an   interrupt   handler   using
       uintr_register_handler(2).  The  registered  interrupt  handler will be
       invoked when a user interrupt is delivered to  that  thread.  Only  one
       interrupt  handler  can  be  registered by a particular thread within a
       process.

       2) Each thread that registers a handler has its own unique vector space
       of 64 vectors. The thread can then use uintr_vector_fd(2) to register a
       vector and create a user interrupt file descriptor - uvec_fd.

       3a) The uvec_fd is only associated with only one Uintr vector.   A  new
       uvec_fd  must  be  created  for  each  of  the  64  vectors. uvec_fd is
       automatically inherited by forked processes but the receiver  can  also
       share  the  uvec_fd with potential senders using any of the existing FD
       sharing mechanisms (like pidfd_getfd(2) or socket  sendmsg(2)).  Access
       to uvec_fd allows a sender to generate an interrupt with the associated
       vector. Upon interrupt delivery, the interrupt handler is invoked  with
       the  vector  number pushed onto the stack to identify the source of the
       interrupt.

       4) Each thread has a local flag called User Interrupt flag  (UIF).  The
       thread  can set or clear this flag to enable or disable interrupts. The
       default value of UIF is always 0 (Interrupts disabled). A receiver must
       execute  the  _stui()  intrinsic  instruction  at some point (before or
       anytime after registration) to  start  receiving  user  interrupts.  To
       disable  interrupts  during  critical  sections the thread can call the
       _clui() instruction to clear UIF.

       5a) For sending a user IPI, the sender task registers with  the  kernel
       using  uintr_register_sender(2).  The  kernel  would  setup the routing
       tables to connect the sender and receiver. The syscall returns an index
       that can be used with the 'SENDUIPI <index>' instruction to send a user
       IPI.  If the receiver is running, the interrupt is  delivered  directly
       to  the  receiver  without  any  kernel  intervention.  See  9) for the
       behavior when the receiver is not running.

       5b) If the sender is the kernel or an external source, the uvec_fd  can
       be  passed  onto the related kernel entity to allow them to connect and
       generate the user interrupt. The specifics of this mechanism  would  be
       defined by the kernel entity being connected to.

       6)  If  a  sender task is part of the same process as the receiver then
       the FD based connection setup can  be  avoided.  uintr_register_self(2)
       takes  the  vector  as  an  input  and returns an uipi_index similar to
       uintr_register_sender(2), which can be used by all tasks  of  the  same
       process to generate User IPIs.

       7) If a sender process wants to share it's IPI connections with another
       process it can request an IPI FD using uintr_ipi_fd(2). Also,  all  IPI
       connections are inherited upon fork().

       8) The sender and receiver are expected to coordinate and then call the
       teardown syscalls to terminate the connection:
         a. A sender unregisters with uintr_unregister_sender(2)
         b. A receiver unregisters with uintr_unregister_handler(2)
         c. Calling close() on the file descrpiptors if they have been created

       If the sender and receiver  aren't  able  to  coordinate,  some  shared
       kernel  resources  between  them  would  get  freed later when the file
       descriptors get released automatically on process exit.

       9) User Interrupts can only be  delivered  if  a  task  is  running  in
       ring-3.   The  behavior differs when a receiver is not actively running
       based on each of the below states.

       a) The receiver has been context switched out because it's  time  slice
       has  expired  or  a higher priority task is running. The a pending User
       Interrupt in that case would be delivered when the receiver is  context
       switched back.

       b)  The  receiver is in context but not running in ring 3 (probably due
       to a syscall). The interrupt will be delivered the task  enters  ring-3
       again.

       c)  The  receiver is blocked in the kernel and context switched out due
       to a blocking system call like read() or  sleep().   The  receiver  can
       choose  to  be  context  switched  in  and  the  blocking syscall to be
       interrupted with the -EINTR error code similar to signal().  A specific
       interrupt handler flag needs to be passed to request such behavior.

       The  receiver  can  also  block  in  the kernel using the uintr_wait(2)
       system call if it is explicitly waiting for user interrupts.

       10)An process can use uintr_alt_stack(2) if  it  wants  to  handle  the
       interrupt  on  a  different  stack than the one it was running when the
       interrupt was received.


       Multi-threaded applications need to be careful when using  Uintr  since
       some  of  the features are thread specific. Actions by one thread might
       not reflect on other threads of the same application.


   Toolchain support
       Support has added to GCC(11.1)  and  Binutils(2.36.1)  to  enable  user
       interrupt intrinsic instructions and compiler flag (-muintr).

       The "(interrupt)" attribute can be used to compile a function as a user
       interrupt handler. In conjunction with the 'muintr' flag, the  compiler
       would:
         -  Generate  the  entry  and  exit  sequences  for the User interrupt
       handler
         - Handle the saving and restoring of registers
         - Call uiret to return from a user interrupt handler

       User   Interrupts   related   compiler   intrinsic    instructions    -
       <x86gprintrin.h>:

       _clui() - Disable user interrupts - clear UIF (User Interrupt Flag).

       _stui() - enable user interrupts - set UIF.

       _testui() - test current value of UIF.

       _uiret() - return from a user interrupt handler.

       _senduipi  <uipi_index>  -  send  a  user  IPI  to  a  target task. The
       uipi_index is obtained using uintr_register_sender(2).


   Interrupt handler restrictions
       There are restrictions on what can be done in a user interrupt handler.

       For example, the handler and the  functions  called  from  the  handler
       should only use general purpose registers.

       For    details    refer   the   Uintr   compiler   programming   guide.
       https://github.com/intel/uintr-compiler-guide/blob/uintr-
       gcc-11.1/UINTR-compiler-guide.pdf


CONFORMING TO
              Uintr related system calls are Linux specific.

EXAMPLES
   Build
       To compile this sample an updated toolchain is needed.
        - Use GCC release 11 or higher &
        - Use Binutils release 2.36 or higher

       gcc -muintr -mgeneral-regs-only -minline-all-stringops uipi_sample.c -lpthread -o uipi_sample


   Run
       $./uipi_sample
       Receiver enabled interrupts
       Sending IPI from sender thread
            -- User Interrupt handler --
       Success


   Program source
       #define _GNU_SOURCE
       #include <pthread.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <syscall.h>
       #include <unistd.h>
       #include <x86gprintrin.h>

       #define __NR_uintr_register_handler     471
       #define __NR_uintr_unregister_handler   472
       #define __NR_uintr_vector_fd       473
       #define __NR_uintr_register_sender 474
       #define __NR_uintr_unregister_sender    475

       #define uintr_register_handler(handler, flags)    syscall(__NR_uintr_register_handler, handler, flags)
       #define uintr_unregister_handler(flags)      syscall(__NR_uintr_unregister_handler, flags)
       #define uintr_vector_fd(vector, flags)       syscall(__NR_uintr_vector_fd, vector, flags)
       #define uintr_register_sender(fd, flags)     syscall(__NR_uintr_register_sender, fd, flags)
       #define uintr_unregister_sender(ipi_idx, flags)   syscall(__NR_uintr_unregister_sender, ipi_idx, flags)

       unsigned int uintr_received;
       unsigned int uvec_fd;

       void __attribute__ ((interrupt)) uintr_handler(struct __uintr_frame *ui_frame,
                                    unsigned long long vector)
       {
            static const char print[] = "\t-- User Interrupt handler --\n";

            write(STDOUT_FILENO, print, sizeof(print) - 1);
            uintr_received = 1;
       }

       void *sender_thread(void *arg)
       {
            int uipi_index;

            uipi_index = uintr_register_sender(uvec_fd, 0);
            if (uipi_index < 0) {
                 printf("Sender register error\n");
                 exit(EXIT_FAILURE);
            }

            printf("Sending IPI from sender thread\n");
            _senduipi(uipi_index);

            uintr_unregister_sender(uipi_index, 0);

            return NULL;
       }

       int main(int argc, char *argv[])
       {
            pthread_t pt;

            if (uintr_register_handler(uintr_handler, 0)) {
                 printf("Interrupt handler register error\n");
                 exit(EXIT_FAILURE);
            }

            uvec_fd = uintr_vector_fd(0, 0);
            if (uvec_fd < 0) {
                 printf("Interrupt vector registration error\n");
                 exit(EXIT_FAILURE);
            }

            _stui();
            printf("Receiver enabled interrupts\n");

            if (pthread_create(&pt, NULL, &sender_thread, NULL)) {
                 printf("Error creating sender thread\n");
                 exit(EXIT_FAILURE);
            }

            /* Do some other work */
            while (!uintr_received)
                 usleep(1);

            pthread_join(pt, NULL);
            close(uvec_fd);
            uintr_unregister_handler(0);

            printf("Success\n");
            exit(EXIT_SUCCESS);
       }


NOTES
       Currently, there is no glibc wrapper for the Uintr related system call;
       call  the system calls using syscall(2).



                                                                      UINTR(7)
